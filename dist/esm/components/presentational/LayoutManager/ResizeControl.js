import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _extends from "@babel/runtime/helpers/extends";
import _css from "@emotion/css";
import { jsx as ___EmotionJSX } from "@emotion/core";
import React, { PureComponent, Fragment } from 'react';
import raf from 'raf-schd';
import { Global } from '@emotion/core';
import { withAnalyticsEvents } from '@atlaskit/analytics-next';
import * as colors from '@atlaskit/theme/colors';
import ChevronLeft from '@atlaskit/icon/glyph/chevron-left';
import ChevronRight from '@atlaskit/icon/glyph/chevron-right';
import MenuExpandIcon from '@atlaskit/icon/glyph/menu-expand';
import Tooltip from '@atlaskit/tooltip';
import { navigationExpandedCollapsed } from '../../../common/analytics';
import { GLOBAL_NAV_WIDTH, CONTENT_NAV_WIDTH, CONTENT_NAV_WIDTH_COLLAPSED, GLOBAL_NAV_COLLAPSE_THRESHOLD } from '../../../common/constants';
import { Shadow } from '../../../common/primitives';
var HANDLE_OFFSET = 4;
var INNER_WIDTH = 20;
var OUTER_WIDTH = INNER_WIDTH + HANDLE_OFFSET;
var HANDLE_WIDTH = 2;

var shouldResetGrabArea = function shouldResetGrabArea(width) {
  return width >= GLOBAL_NAV_COLLAPSE_THRESHOLD && width < CONTENT_NAV_WIDTH;
};

export var BodyDragCursor = function BodyDragCursor() {
  return ___EmotionJSX(Global, {
    styles: {
      body: {
        cursor: 'ew-resize'
      }
    }
  });
};

var Outer = function Outer(props) {
  return ___EmotionJSX("div", _extends({
    css:
    /*#__PURE__*/
    _css({
      bottom: 0,
      left: '100%',
      position: 'absolute',
      top: 0,
      transform: 'translateZ(0)',
      width: OUTER_WIDTH,
      zIndex: 3 // higher than the scroll hint lines

    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL3ByZXNlbnRhdGlvbmFsL0xheW91dE1hbmFnZXIvUmVzaXplQ29udHJvbC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpREkiLCJmaWxlIjoiLi4vLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvcHJlc2VudGF0aW9uYWwvTGF5b3V0TWFuYWdlci9SZXNpemVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQGZsb3dcblxuaW1wb3J0IFJlYWN0LCB7XG4gIFB1cmVDb21wb25lbnQsXG4gIEZyYWdtZW50LFxuICB0eXBlIE5vZGUsXG4gIHR5cGUgUmVmLFxuICB0eXBlIEVsZW1lbnRSZWYsXG59IGZyb20gJ3JlYWN0JztcbmltcG9ydCByYWYgZnJvbSAncmFmLXNjaGQnO1xuaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgeyB3aXRoQW5hbHl0aWNzRXZlbnRzIH0gZnJvbSAnQGF0bGFza2l0L2FuYWx5dGljcy1uZXh0JztcbmltcG9ydCAqIGFzIGNvbG9ycyBmcm9tICdAYXRsYXNraXQvdGhlbWUvY29sb3JzJztcbmltcG9ydCBDaGV2cm9uTGVmdCBmcm9tICdAYXRsYXNraXQvaWNvbi9nbHlwaC9jaGV2cm9uLWxlZnQnO1xuaW1wb3J0IENoZXZyb25SaWdodCBmcm9tICdAYXRsYXNraXQvaWNvbi9nbHlwaC9jaGV2cm9uLXJpZ2h0JztcbmltcG9ydCBNZW51RXhwYW5kSWNvbiBmcm9tICdAYXRsYXNraXQvaWNvbi9nbHlwaC9tZW51LWV4cGFuZCc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICdAYXRsYXNraXQvdG9vbHRpcCc7XG5cbmltcG9ydCB7IG5hdmlnYXRpb25FeHBhbmRlZENvbGxhcHNlZCB9IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9hbmFseXRpY3MnO1xuaW1wb3J0IHtcbiAgR0xPQkFMX05BVl9XSURUSCxcbiAgQ09OVEVOVF9OQVZfV0lEVEgsXG4gIENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRCxcbiAgR0xPQkFMX05BVl9DT0xMQVBTRV9USFJFU0hPTEQsXG59IGZyb20gJy4uLy4uLy4uL2NvbW1vbi9jb25zdGFudHMnO1xuaW1wb3J0IHsgU2hhZG93IH0gZnJvbSAnLi4vLi4vLi4vY29tbW9uL3ByaW1pdGl2ZXMnO1xuXG5pbXBvcnQgdHlwZSB7IENvbGxhcHNlVG9nZ2xlVG9vbHRpcENvbnRlbnQgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgSEFORExFX09GRlNFVCA9IDQ7XG5jb25zdCBJTk5FUl9XSURUSCA9IDIwO1xuY29uc3QgT1VURVJfV0lEVEggPSBJTk5FUl9XSURUSCArIEhBTkRMRV9PRkZTRVQ7XG5jb25zdCBIQU5ETEVfV0lEVEggPSAyO1xuY29uc3Qgc2hvdWxkUmVzZXRHcmFiQXJlYSA9ICh3aWR0aDogbnVtYmVyKSA9PiB7XG4gIHJldHVybiB3aWR0aCA+PSBHTE9CQUxfTkFWX0NPTExBUFNFX1RIUkVTSE9MRCAmJiB3aWR0aCA8IENPTlRFTlRfTkFWX1dJRFRIO1xufTtcblxuZXhwb3J0IGNvbnN0IEJvZHlEcmFnQ3Vyc29yID0gKCkgPT4gKFxuICA8R2xvYmFsXG4gICAgc3R5bGVzPXt7XG4gICAgICBib2R5OiB7XG4gICAgICAgIGN1cnNvcjogJ2V3LXJlc2l6ZScsXG4gICAgICB9LFxuICAgIH19XG4gIC8+XG4pO1xuXG5jb25zdCBPdXRlciA9IChwcm9wczogKikgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAnMTAwJScsXG4gICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgIHRvcDogMCxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZVooMCknLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgICAgekluZGV4OiAzLCAvLyBoaWdoZXIgdGhhbiB0aGUgc2Nyb2xsIGhpbnQgbGluZXNcbiAgICB9fVxuICAgIHsuLi5wcm9wc31cbiAgLz5cbik7XG5cbmV4cG9ydCBjb25zdCBHcmFiQXJlYSA9ICh7IHNob3dIYW5kbGUsIGlzQm9sZCwgLi4ucHJvcHMgfTogKikgPT4gKFxuICA8ZGl2XG4gICAgY3NzPXt7XG4gICAgICBjdXJzb3I6ICdldy1yZXNpemUnLFxuICAgICAgaGVpZ2h0OiAnMTAwJScsXG4gICAgICBsZWZ0OiAtSEFORExFX09GRlNFVCxcbiAgICAgIHBvc2l0aW9uOiAncmVsYXRpdmUnLFxuICAgICAgd2lkdGg6IE9VVEVSX1dJRFRILFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgY3NzPXt7XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogaXNCb2xkID8gY29sb3JzLkIyMDAgOiBjb2xvcnMuQjEwMCxcbiAgICAgICAgb3BhY2l0eTogc2hvd0hhbmRsZSA/IDEgOiAwLFxuICAgICAgICBoZWlnaHQ6ICcxMDAlJyxcbiAgICAgICAgbGVmdDogSEFORExFX09GRlNFVCAtIEhBTkRMRV9XSURUSCAvIDIsIC8vIHRoZSBoYW5kbGUgc2hvdWxkIFwic3RyYWRkbGVcIiB0aGUgZGl2aWRpbmcgbGluZVxuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgdHJhbnNpdGlvbjogJ29wYWNpdHkgMjAwbXMnLFxuICAgICAgICB3aWR0aDogSEFORExFX1dJRFRILFxuICAgICAgfX1cbiAgICAvPlxuICA8L2Rpdj5cbik7XG5jb25zdCBsYXJnZUhpdEFyZWEgPSB7XG4gIGxlZnQ6IC04LFxuICByaWdodDogLTEyLFxuICBib3R0b206IC04LFxuICB0b3A6IC04LFxufTtcbmNvbnN0IHNtYWxsSGl0QXJlYSA9IHtcbiAgbGVmdDogLTQsXG4gIHJpZ2h0OiAtNCxcbiAgYm90dG9tOiAtNCxcbiAgdG9wOiAtNCxcbn07XG50eXBlIEJ1dHRvblByb3BzID0ge1xuICBjaGlsZHJlbjogTm9kZSxcbiAgaGFzSGlnaGxpZ2h0OiBib29sZWFuLFxuICBpbm5lclJlZjogUmVmPCdidXR0b24nPixcbiAgaXNWaXNpYmxlOiBib29sZWFuLFxuICBoaXRBcmVhU2l6ZTogJ3NtYWxsJyB8ICdsYXJnZScsXG59O1xuY29uc3QgQnV0dG9uID0gKHtcbiAgY2hpbGRyZW4sXG4gIGhhc0hpZ2hsaWdodCxcbiAgaW5uZXJSZWYsXG4gIGlzVmlzaWJsZSxcbiAgaGl0QXJlYVNpemUsXG4gIC4uLnByb3BzXG59OiBCdXR0b25Qcm9wcykgPT4gKFxuICA8YnV0dG9uXG4gICAgY2xhc3NOYW1lPVwiYWstbmF2aWdhdGlvbi1yZXNpemUtYnV0dG9uXCJcbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICByZWY9e2lubmVyUmVmfVxuICAgIGNzcz17e1xuICAgICAgYmFja2dyb3VuZDogMCxcbiAgICAgIGJhY2tncm91bmRDb2xvcjogJ3doaXRlJyxcbiAgICAgIGJvcmRlcjogMCxcbiAgICAgIGJvcmRlclJhZGl1czogJzUwJScsXG4gICAgICBib3hTaGFkb3c6IGAwIDAgMCAxcHggJHtjb2xvcnMuTjMwQX0sIDAgMnB4IDRweCAxcHggJHtjb2xvcnMuTjMwQX1gLFxuICAgICAgY29sb3I6IGhhc0hpZ2hsaWdodCA/IGNvbG9ycy5CMTAwIDogY29sb3JzLk4yMDAsXG4gICAgICBjdXJzb3I6ICdwb2ludGVyJyxcbiAgICAgIGhlaWdodDogMjQsXG4gICAgICBvcGFjaXR5OiBpc1Zpc2libGUgPyAxIDogMCxcbiAgICAgIG91dGxpbmU6IDAsXG4gICAgICBwYWRkaW5nOiAwLFxuICAgICAgcG9zaXRpb246ICdhYnNvbHV0ZScsXG4gICAgICB0b3A6IDMyLFxuICAgICAgdHJhbnNpdGlvbjogYFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIDEwMG1zIGxpbmVhcixcbiAgICAgICAgY29sb3IgMTAwbXMgbGluZWFyLFxuICAgICAgICBvcGFjaXR5IDMwMG1zIGN1YmljLWJlemllcigwLjIsIDAsIDAsIDEpLFxuICAgICAgICB0cmFuc2Zvcm0gMzAwbXMgY3ViaWMtYmV6aWVyKDAuMiwgMCwgMCwgMSlcbiAgICAgIGAsXG4gICAgICB0cmFuc2Zvcm06IGB0cmFuc2xhdGUoLTUwJSlgLFxuICAgICAgd2lkdGg6IDI0LFxuXG4gICAgICAnOmhvdmVyJzoge1xuICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IGNvbG9ycy5CMTAwLFxuICAgICAgICBjb2xvcjogJ3doaXRlJyxcbiAgICAgIH0sXG4gICAgICAnOmFjdGl2ZSc6IHtcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgICAgJzpmb2N1cyc6IHtcbiAgICAgICAgb3BhY2l0eTogMSxcbiAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuQjIwMCxcbiAgICAgICAgY29sb3I6ICd3aGl0ZScsXG4gICAgICB9LFxuICAgIH19XG4gICAgey4uLnByb3BzfVxuICA+XG4gICAgPGRpdlxuICAgICAgLy8gaW5jcmVhc2UgaGl0LWFyZWFcbiAgICAgIGNzcz17e1xuICAgICAgICBwb3NpdGlvbjogJ2Fic29sdXRlJyxcbiAgICAgICAgLi4uKGhpdEFyZWFTaXplID09PSAnc21hbGwnID8gc21hbGxIaXRBcmVhIDogbGFyZ2VIaXRBcmVhKSxcbiAgICAgIH19XG4gICAgLz5cbiAgICB7Y2hpbGRyZW59XG4gIDwvYnV0dG9uPlxuKTtcblxuLy8gdGlua2VyIHdpdGggdGhlIERPTSBkaXJlY3RseSBieSBzZXR0aW5nIHN0eWxlIHByb3BlcnRpZXMsIHVwZGF0ZXMgdGhlIGdyYWIgYmFyIHBvc2l0aW9uIGJ5IGNoYW5naW5nIHBhZGRpbmctbGVmdCBhbmQgd2lkdGguXG5mdW5jdGlvbiB1cGRhdGVSZXNpemVBcmVhUG9zaXRpb24oXG4gIGVsZW1lbnRzOiBBcnJheTx7IHByb3BlcnR5OiAncGFkZGluZy1sZWZ0JyB8ICd3aWR0aCcsIHJlZjogRWxlbWVudFJlZjwqPiB9PixcbiAgd2lkdGg6IG51bWJlcixcbikge1xuICBlbGVtZW50cy5mb3JFYWNoKCh7IHByb3BlcnR5LCByZWYgfSkgPT4ge1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gYCR7d2lkdGh9cHhgO1xuICAgIGNvbnN0IG9sZFZhbHVlID0gcmVmLnN0eWxlLmdldFByb3BlcnR5VmFsdWUocHJvcGVydHkpO1xuXG4gICAgLy8gYXZvaWQgdGhyYXNoaW5nXG4gICAgaWYgKG9sZFZhbHVlID09PSBuZXdWYWx1ZSkgcmV0dXJuO1xuXG4gICAgLy8gZGlyZWN0IGF0dHJpYnV0ZSBtYW5pcHVsYXRpb25cbiAgICByZWYuc3R5bGUuc2V0UHJvcGVydHkocHJvcGVydHksIG5ld1ZhbHVlKTtcbiAgfSk7XG59XG5cbi8vIGhlbHBlciBmb3IgdG9vbHRpcCBjb250ZW50IGtleWJvYXJkIHNob3J0Y3V0IGhpZ2hsaWdodFxuZnVuY3Rpb24gbWFrZVRvb2x0aXBOb2RlKHsgdGV4dCwgY2hhciB9OiB7IHRleHQ6IHN0cmluZywgY2hhcjogc3RyaW5nIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8ZGl2XG4gICAgICBjc3M9e3tcbiAgICAgICAgYWxpZ25JdGVtczogJ2Jhc2VsaW5lJyxcbiAgICAgICAgZGlzcGxheTogJ2ZsZXgnLFxuICAgICAgICBsaW5lSGVpZ2h0OiAxLjMsXG4gICAgICAgIHBhZGRpbmdCb3R0b206IDEsXG4gICAgICAgIHBhZGRpbmdUb3A6IDEsXG4gICAgICB9fVxuICAgID5cbiAgICAgIDxzcGFuPnt0ZXh0fTwvc3Bhbj5cbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXt7XG4gICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBjb2xvcnMuTjQwMCxcbiAgICAgICAgICBib3JkZXJSYWRpdXM6IDIsXG4gICAgICAgICAgbGluZUhlaWdodDogMS4yLFxuICAgICAgICAgIG1hcmdpbkxlZnQ6IDQsXG4gICAgICAgICAgcGFkZGluZzogJzFweCA4cHgnLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7Y2hhcn1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuXG50eXBlIFByb3BzID0ge1xuICBjcmVhdGVBbmFseXRpY3NFdmVudDogRnVuY3Rpb24sXG4gIGNvbGxhcHNlVG9nZ2xlVG9vbHRpcENvbnRlbnQ/OiBDb2xsYXBzZVRvZ2dsZVRvb2x0aXBDb250ZW50LFxuICBleHBhbmRDb2xsYXBzZUFmZm9yZGFuY2VSZWY6IFJlZjwnYnV0dG9uJz4sXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC9uby11bnVzZWQtcHJvcC10eXBlc1xuICBleHBlcmltZW50YWxfZmx5b3V0T25Ib3ZlcjogYm9vbGVhbixcbiAgZmx5b3V0SXNPcGVuOiBib29sZWFuLFxuICBpc0Rpc2FibGVkOiBib29sZWFuLFxuICBpc0dyYWJBcmVhRGlzYWJsZWQ6IGJvb2xlYW4sXG4gIG11dGF0aW9uUmVmczogQXJyYXk8e1xuICAgIHJlZjogRWxlbWVudFJlZjwqPixcbiAgICBwcm9wZXJ0eTogJ3BhZGRpbmctbGVmdCcgfCAnd2lkdGgnLFxuICB9PixcbiAgb25Nb3VzZU92ZXJCdXR0b25CdWZmZXI6ID8oZTogU3ludGhldGljTW91c2VFdmVudDw+KSA9PiB2b2lkLFxuICBuYXZpZ2F0aW9uOiBPYmplY3QsXG59O1xudHlwZSBTdGF0ZSA9IHtcbiAgZGVsdGE6IG51bWJlcixcbiAgZGlkRHJhZ09wZW46IGJvb2xlYW4sXG4gIGluaXRpYWxXaWR0aDogbnVtYmVyLFxuICBpbml0aWFsWDogbnVtYmVyLFxuICBpc0RyYWdnaW5nOiBib29sZWFuLFxuICBtb3VzZUlzRG93bjogYm9vbGVhbixcbiAgbW91c2VJc092ZXJHcmFiQXJlYTogYm9vbGVhbixcbiAgc2hvd0dyYWJBcmVhOiBib29sZWFuLFxuICB3aWR0aDogbnVtYmVyLFxufTtcblxuLyogTk9URTogZXhwZXJpbWVudGFsIHByb3BzIHVzZSBhbiB1bmRlcnNjb3JlICovXG5jbGFzcyBSZXNpemVDb250cm9sIGV4dGVuZHMgUHVyZUNvbXBvbmVudDxQcm9wcywgU3RhdGU+IHtcbiAgaW52YWxpZERyYWdBdHRlbXB0ZWQgPSBmYWxzZTtcblxuICBsYXN0V2lkdGg6IG51bWJlcjtcblxuICB3cmFwcGVyOiBIVE1MRWxlbWVudDtcblxuICBzdGF0ZSA9IHtcbiAgICBkZWx0YTogMCxcbiAgICBkaWREcmFnT3BlbjogZmFsc2UsXG4gICAgaXNEcmFnZ2luZzogZmFsc2UsXG4gICAgaW5pdGlhbFdpZHRoOiAwLFxuICAgIGluaXRpYWxYOiAwLFxuICAgIG1vdXNlSXNEb3duOiBmYWxzZSxcbiAgICBtb3VzZUlzT3ZlckdyYWJBcmVhOiBmYWxzZSxcbiAgICBzaG93R3JhYkFyZWE6IHRydWUsXG4gICAgd2lkdGg6IHRoaXMucHJvcHMubmF2aWdhdGlvbi5zdGF0ZS5wcm9kdWN0TmF2V2lkdGgsXG4gIH07XG5cbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICBpc0dyYWJBcmVhRGlzYWJsZWQ6IGZhbHNlLFxuICB9O1xuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHM6IFByb3BzLCBzdGF0ZTogU3RhdGUpIHtcbiAgICBjb25zdCB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY2FtZWxjYXNlXG4gICAgICBleHBlcmltZW50YWxfZmx5b3V0T25Ib3ZlcjogRVhQRVJJTUVOVEFMX0ZMWU9VVF9PTl9IT1ZFUixcbiAgICAgIGZseW91dElzT3BlbixcbiAgICAgIG5hdmlnYXRpb24sXG4gICAgfSA9IHByb3BzO1xuICAgIGNvbnN0IHsgaXNDb2xsYXBzZWQgfSA9IG5hdmlnYXRpb24uc3RhdGU7XG5cbiAgICAvLyByZXNvbHZlIFwiaG92ZXIgbG9ja2luZ1wiIGlzc3VlIHdpdGggcmVzaXplIGdyYWIgYXJlYVxuICAgIGlmIChFWFBFUklNRU5UQUxfRkxZT1VUX09OX0hPVkVSKSB7XG4gICAgICBjb25zdCBzaG93R3JhYkFyZWEgPSAhaXNDb2xsYXBzZWQgJiYgIWZseW91dElzT3BlbjtcbiAgICAgIGNvbnN0IG1vdXNlSXNPdmVyR3JhYkFyZWEgPSBzaG93R3JhYkFyZWFcbiAgICAgICAgPyBzdGF0ZS5tb3VzZUlzT3ZlckdyYWJBcmVhXG4gICAgICAgIDogZmFsc2U7XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1vdXNlSXNPdmVyR3JhYkFyZWEsXG4gICAgICAgIHNob3dHcmFiQXJlYSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBvblJlc2l6ZXJDaGV2cm9uQ2xpY2sgPSAoKSA9PiB7XG4gICAgY29uc3QgdHJpZ2dlciA9IHRoaXMucHJvcHMuZmx5b3V0SXNPcGVuID8gJ2NoZXZyb25Ib3ZlcicgOiAnY2hldnJvbic7XG4gICAgdGhpcy50b2dnbGVDb2xsYXBzZSh0cmlnZ2VyKTtcbiAgfTtcblxuICBtb3VzZUVudGVyR3JhYkFyZWEgPSAoKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IG1vdXNlSXNPdmVyR3JhYkFyZWE6IHRydWUgfSk7XG4gIH07XG5cbiAgbW91c2VMZWF2ZUdyYWJBcmVhID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBtb3VzZUlzT3ZlckdyYWJBcmVhOiBmYWxzZSB9KTtcbiAgfTtcblxuICB0b2dnbGVDb2xsYXBzZSA9ICh0cmlnZ2VyOiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCB7IG5hdmlnYXRpb24sIGNyZWF0ZUFuYWx5dGljc0V2ZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IG5ld0NvbGxhcHNlZFN0YXRlOiBib29sZWFuID0gIW5hdmlnYXRpb24uc3RhdGUuaXNDb2xsYXBzZWQ7XG4gICAgbmF2aWdhdGlvbi50b2dnbGVDb2xsYXBzZSgpO1xuICAgIG5hdmlnYXRpb25FeHBhbmRlZENvbGxhcHNlZChjcmVhdGVBbmFseXRpY3NFdmVudCwge1xuICAgICAgdHJpZ2dlcixcbiAgICAgIGlzQ29sbGFwc2VkOiBuZXdDb2xsYXBzZWRTdGF0ZSxcbiAgICB9KTtcbiAgfTtcblxuICBoYW5kbGVSZXNpemVTdGFydCA9IChldmVudDogTW91c2VFdmVudCkgPT4ge1xuICAgIGNvbnN0IGluaXRpYWxYID0gZXZlbnQucGFnZVg7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgaW5pdGlhbFgsIG1vdXNlSXNEb3duOiB0cnVlIH0pO1xuXG4gICAgLy8gYXR0YWNoIGhhbmRsZXJzIChoYW5kbGVSZXNpemVTdGFydCBpcyBhIGJvdW5kIHRvIG9uTW91c2VEb3duKVxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmhhbmRsZVJlc2l6ZSk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmhhbmRsZVJlc2l6ZUVuZCk7XG4gIH07XG5cbiAgaW5pdGlhbGl6ZURyYWcgPSAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBjb25zdCB7IG5hdmlnYXRpb24gfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZGVsdGEgPSBldmVudC5wYWdlWCAtIHRoaXMuc3RhdGUuaW5pdGlhbFg7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gbmF2aWdhdGlvbi5zdGF0ZTtcblxuICAgIC8vIG9ubHkgaW5pdGlhbGl6ZSB3aGVuIGRyYWcgaW50ZW50aW9uIGlzIFwiZXhwYW5kXCJcbiAgICBpZiAoaXNDb2xsYXBzZWQgJiYgZGVsdGEgPD0gMCkge1xuICAgICAgdGhpcy5pbnZhbGlkRHJhZ0F0dGVtcHRlZCA9IHRydWU7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IGluaXRpYWxXaWR0aCA9IG5hdmlnYXRpb24uc3RhdGUucHJvZHVjdE5hdldpZHRoO1xuICAgIGxldCBkaWREcmFnT3BlbiA9IGZhbHNlO1xuXG4gICAgLy8gTk9URVxuICAgIC8vIGlmIHRoZSBwcm9kdWN0IG5hdiBpcyBjb2xsYXBzZWQgYW5kIHRoZSBjb25zdW1lciBzdGFydHMgZHJhZ2dpbmcgaXQgb3BlblxuICAgIC8vIHdlIG11c3QgZXhwYW5kIGl0IGFuZCBkcmFnIHNob3VsZCBzdGFydCBmcm9tIDAuXG4gICAgaWYgKGlzQ29sbGFwc2VkKSB7XG4gICAgICBpbml0aWFsV2lkdGggPSBDT05URU5UX05BVl9XSURUSF9DT0xMQVBTRUQ7XG4gICAgICBkaWREcmFnT3BlbiA9IHRydWU7XG4gICAgICBuYXZpZ2F0aW9uLm1hbnVhbFJlc2l6ZVN0YXJ0KHtcbiAgICAgICAgcHJvZHVjdE5hdldpZHRoOiBDT05URU5UX05BVl9XSURUSF9DT0xMQVBTRUQsXG4gICAgICAgIGlzQ29sbGFwc2VkOiBmYWxzZSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBuYXZpZ2F0aW9uLm1hbnVhbFJlc2l6ZVN0YXJ0KG5hdmlnYXRpb24uc3RhdGUpO1xuICAgIH1cblxuICAgIHRoaXMuc2V0U3RhdGUoeyBkaWREcmFnT3BlbiwgaW5pdGlhbFdpZHRoLCBpc0RyYWdnaW5nOiB0cnVlIH0pO1xuICB9O1xuXG4gIGhhbmRsZVJlc2l6ZSA9IHJhZigoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHtcbiAgICBjb25zdCB7IG11dGF0aW9uUmVmcyB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCB7IGluaXRpYWxYLCBpbml0aWFsV2lkdGgsIGlzRHJhZ2dpbmcsIG1vdXNlSXNEb3duIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgLy8gb24gb2NjYXNpb24gYSBtb3VzZSBtb3ZlIGV2ZW50IG9jY3VycyBiZWZvcmUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgIC8vIGhhdmUgYSBjaGFuY2UgdG8gZGV0YWNoXG4gICAgaWYgKCFtb3VzZUlzRG93bikgcmV0dXJuO1xuXG4gICAgLy8gaW5pdGlhbGl6ZSBkcmFnZ2luZ1xuICAgIGlmICghaXNEcmFnZ2luZykge1xuICAgICAgdGhpcy5pbml0aWFsaXplRHJhZyhldmVudCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gYWxsb3cgdGhlIHByb2R1Y3QgbmF2IHRvIGJlIDc1JSBvZiB0aGUgYXZhaWxhYmxlIHBhZ2Ugd2lkdGhcbiAgICBjb25zdCBtYXhXaWR0aCA9IE1hdGgucm91bmQoKHdpbmRvdy5pbm5lcldpZHRoIC8gNCkgKiAzKTtcbiAgICBjb25zdCBtaW5XaWR0aCA9IENPTlRFTlRfTkFWX1dJRFRIX0NPTExBUFNFRDtcbiAgICBjb25zdCBhZGp1c3RlZE1heCA9IG1heFdpZHRoIC0gaW5pdGlhbFdpZHRoIC0gR0xPQkFMX05BVl9XSURUSDtcbiAgICBjb25zdCBhZGp1c3RlZE1pbiA9IG1pbldpZHRoIC0gaW5pdGlhbFdpZHRoO1xuXG4gICAgY29uc3QgZGVsdGEgPSBNYXRoLm1heChcbiAgICAgIE1hdGgubWluKGV2ZW50LnBhZ2VYIC0gaW5pdGlhbFgsIGFkanVzdGVkTWF4KSxcbiAgICAgIGFkanVzdGVkTWluLFxuICAgICk7XG4gICAgY29uc3Qgd2lkdGggPSBpbml0aWFsV2lkdGggKyBkZWx0YTtcblxuICAgIC8vIGFwcGx5IHVwZGF0ZWQgc3R5bGVzIHRvIHRoZSBhcHBsaWNhYmxlIERPTSBub2Rlc1xuICAgIHVwZGF0ZVJlc2l6ZUFyZWFQb3NpdGlvbihtdXRhdGlvblJlZnMsIHdpZHRoKTtcblxuICAgIC8vIE5PVEU6IGhpamFjayB0aGUgbWF1YWwgcmVzaXplIGFuZCBmb3JjZSBjb2xsYXBzZSwgY2FuY2VscyBtb3VzZSBldmVudHNcbiAgICBpZiAoZXZlbnQuY2xpZW50WCA8IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB3aWR0aDogQ09OVEVOVF9OQVZfV0lEVEhfQ09MTEFQU0VEIH0pO1xuICAgICAgdGhpcy5oYW5kbGVSZXNpemVFbmQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbWFpbnRhaW4gaW50ZXJuYWwgd2lkdGgsIGFwcGxpZWQgdG8gbmF2aWdhdGlvbiBzdGF0ZSBvbiByZXNpemUgZW5kXG4gICAgICB0aGlzLnNldFN0YXRlKHsgZGVsdGEsIHdpZHRoIH0pO1xuICAgIH1cbiAgfSk7XG5cbiAgaGFuZGxlUmVzaXplRW5kID0gKCkgPT4ge1xuICAgIGNvbnN0IHsgbmF2aWdhdGlvbiwgY3JlYXRlQW5hbHl0aWNzRXZlbnQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBkZWx0YSwgZGlkRHJhZ09wZW4sIGlzRHJhZ2dpbmcsIHdpZHRoOiBjdXJyZW50V2lkdGggfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgZXhwYW5kVGhyZXNob2xkID0gMjQ7XG4gICAgY29uc3QgcmVzaXplckNsaWNrZWQgPSAhaXNEcmFnZ2luZyAmJiAhdGhpcy5pbnZhbGlkRHJhZ0F0dGVtcHRlZDtcbiAgICBsZXQgcHVibGlzaFdpZHRoID0gY3VycmVudFdpZHRoO1xuICAgIGxldCBzaG91bGRDb2xsYXBzZSA9IGZhbHNlO1xuXG4gICAgLy8gY2hlY2sgaWYgdGhlIGludGVudGlvbiB3YXMganVzdCBhIGNsaWNrLCBhbmQgdG9nZ2xlXG4gICAgaWYgKHJlc2l6ZXJDbGlja2VkKSB7XG4gICAgICBwdWJsaXNoV2lkdGggPSBNYXRoLm1heChDT05URU5UX05BVl9XSURUSCwgY3VycmVudFdpZHRoKTtcbiAgICAgIHRoaXMudG9nZ2xlQ29sbGFwc2UoJ3Jlc2l6ZXJDbGljaycpO1xuICAgIH1cblxuICAgIC8vIHByZXZlbnQgdGhlIHVzZXIgZnJvbSBjcmVhdGluZyBhbiB1bnVzYWJsZSB3aWR0aFxuICAgIGlmIChwdWJsaXNoV2lkdGggPCBDT05URU5UX05BVl9XSURUSCkge1xuICAgICAgcHVibGlzaFdpZHRoID0gQ09OVEVOVF9OQVZfV0lEVEg7XG4gICAgICBpZiAoZGlkRHJhZ09wZW4gJiYgZGVsdGEgPiBleHBhbmRUaHJlc2hvbGQpIHtcbiAgICAgICAgc2hvdWxkQ29sbGFwc2UgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAoY3VycmVudFdpZHRoIDwgR0xPQkFMX05BVl9DT0xMQVBTRV9USFJFU0hPTEQpIHtcbiAgICAgICAgc2hvdWxkQ29sbGFwc2UgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzaG91bGRDb2xsYXBzZSA9IG5hdmlnYXRpb24uc3RhdGUuaXNDb2xsYXBzZWQ7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgIXJlc2l6ZXJDbGlja2VkICYmXG4gICAgICAoKGRpZERyYWdPcGVuICYmICFzaG91bGRDb2xsYXBzZSkgfHwgKCFkaWREcmFnT3BlbiAmJiBzaG91bGRDb2xsYXBzZSkpXG4gICAgKSB7XG4gICAgICBuYXZpZ2F0aW9uRXhwYW5kZWRDb2xsYXBzZWQoY3JlYXRlQW5hbHl0aWNzRXZlbnQsIHtcbiAgICAgICAgdHJpZ2dlcjogJ3Jlc2l6ZXJEcmFnJyxcbiAgICAgICAgaXNDb2xsYXBzZWQ6IHNob3VsZENvbGxhcHNlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gcmVzZXQgZXZlcnl0aGluZ1xuICAgIHRoaXMuaW52YWxpZERyYWdBdHRlbXB0ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRpZERyYWdPcGVuOiBmYWxzZSxcbiAgICAgIGlzRHJhZ2dpbmc6IGZhbHNlLFxuICAgICAgbW91c2VJc0Rvd246IGZhbHNlLFxuICAgICAgd2lkdGg6IHB1Ymxpc2hXaWR0aCxcbiAgICB9KTtcblxuICAgIC8vIHB1Ymxpc2ggdGhlIG5ldyB3aWR0aCwgb25jZSByZXNpemluZyBjb21wbGV0ZXNcbiAgICBuYXZpZ2F0aW9uLm1hbnVhbFJlc2l6ZUVuZCh7XG4gICAgICBwcm9kdWN0TmF2V2lkdGg6IHB1Ymxpc2hXaWR0aCxcbiAgICAgIGlzQ29sbGFwc2VkOiBzaG91bGRDb2xsYXBzZSxcbiAgICB9KTtcblxuICAgIGlmIChzaG91bGRSZXNldEdyYWJBcmVhKGN1cnJlbnRXaWR0aCkpIHtcbiAgICAgIHVwZGF0ZVJlc2l6ZUFyZWFQb3NpdGlvbih0aGlzLnByb3BzLm11dGF0aW9uUmVmcywgQ09OVEVOVF9OQVZfV0lEVEgpO1xuICAgIH1cblxuICAgIC8vIGNsZWFudXBcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5oYW5kbGVSZXNpemUpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5oYW5kbGVSZXNpemVFbmQpO1xuICB9O1xuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICBkaWREcmFnT3BlbixcbiAgICAgIGlzRHJhZ2dpbmcsXG4gICAgICBtb3VzZUlzRG93bixcbiAgICAgIG1vdXNlSXNPdmVyR3JhYkFyZWEsXG4gICAgICBzaG93R3JhYkFyZWEsXG4gICAgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3Qge1xuICAgICAgY29sbGFwc2VUb2dnbGVUb29sdGlwQ29udGVudCxcbiAgICAgIGV4cGFuZENvbGxhcHNlQWZmb3JkYW5jZVJlZixcbiAgICAgIGZseW91dElzT3BlbixcbiAgICAgIGlzRGlzYWJsZWQ6IGlzUmVzaXplRGlzYWJsZWQsXG4gICAgICBpc0dyYWJBcmVhRGlzYWJsZWQsXG4gICAgICBvbk1vdXNlT3ZlckJ1dHRvbkJ1ZmZlcixcbiAgICAgIG5hdmlnYXRpb24sXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBpc0NvbGxhcHNlZCB9ID0gbmF2aWdhdGlvbi5zdGF0ZTtcblxuICAgIC8vIHRoZSBidXR0b24gc2hvdWxkbid0IFwiZmxpcFwiIHVudGlsIHRoZSBkcmFnIGlzIGNvbXBsZXRlXG4gICAgbGV0IEJ1dHRvbkljb24gPSBDaGV2cm9uTGVmdDtcbiAgICBpZiAoaXNDb2xsYXBzZWQgfHwgKGRpZERyYWdPcGVuICYmIGlzRHJhZ2dpbmcpKSBCdXR0b25JY29uID0gTWVudUV4cGFuZEljb247XG4gICAgaWYgKGlzQ29sbGFwc2VkICYmIGZseW91dElzT3BlbikgQnV0dG9uSWNvbiA9IENoZXZyb25SaWdodDtcblxuICAgIGNvbnN0IGJ1dHRvbiA9IChcbiAgICAgIDxCdXR0b25cbiAgICAgICAgb25DbGljaz17dGhpcy5vblJlc2l6ZXJDaGV2cm9uQ2xpY2t9XG4gICAgICAgIGhpdEFyZWFTaXplPXtvbk1vdXNlT3ZlckJ1dHRvbkJ1ZmZlciA/ICdsYXJnZScgOiAnc21hbGwnfVxuICAgICAgICAvLyBtYWludGFpbiBzdHlsZXMgd2hlbiB1c2VyIGlzIGRyYWdnaW5nXG4gICAgICAgIGlzVmlzaWJsZT17aXNDb2xsYXBzZWQgfHwgbW91c2VJc0Rvd259XG4gICAgICAgIGhhc0hpZ2hsaWdodD17bW91c2VJc0Rvd24gfHwgbW91c2VJc092ZXJHcmFiQXJlYX1cbiAgICAgICAgaW5uZXJSZWY9e2V4cGFuZENvbGxhcHNlQWZmb3JkYW5jZVJlZn1cbiAgICAgICAgYXJpYS1leHBhbmRlZD17IWlzQ29sbGFwc2VkfVxuICAgICAgICBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5hdmlnYXRpb25cIlxuICAgICAgPlxuICAgICAgICA8QnV0dG9uSWNvbiAvPlxuICAgICAgPC9CdXR0b24+XG4gICAgKTtcbiAgICBjb25zdCBzaGFkb3dEaXJlY3Rpb24gPSBmbHlvdXRJc09wZW4gPyAndG8gcmlnaHQnIDogJ3RvIGxlZnQnO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxPdXRlcj5cbiAgICAgICAge2lzRHJhZ2dpbmcgJiYgPEJvZHlEcmFnQ3Vyc29yIC8+fVxuICAgICAgICA8U2hhZG93IGRpcmVjdGlvbj17c2hhZG93RGlyZWN0aW9ufSBpc0JvbGQ9e21vdXNlSXNEb3dufSAvPlxuICAgICAgICB7IWlzUmVzaXplRGlzYWJsZWQgJiYgKFxuICAgICAgICAgIDxGcmFnbWVudD5cbiAgICAgICAgICAgIHshaXNHcmFiQXJlYURpc2FibGVkICYmIHNob3dHcmFiQXJlYSAmJiAoXG4gICAgICAgICAgICAgIDxHcmFiQXJlYVxuICAgICAgICAgICAgICAgIGlzQm9sZD17bW91c2VJc0Rvd259XG4gICAgICAgICAgICAgICAgc2hvd0hhbmRsZT17bW91c2VJc0Rvd24gfHwgbW91c2VJc092ZXJHcmFiQXJlYX1cbiAgICAgICAgICAgICAgICBvbk1vdXNlRW50ZXI9e3RoaXMubW91c2VFbnRlckdyYWJBcmVhfVxuICAgICAgICAgICAgICAgIG9uTW91c2VMZWF2ZT17dGhpcy5tb3VzZUxlYXZlR3JhYkFyZWF9XG4gICAgICAgICAgICAgICAgb25Nb3VzZURvd249e3RoaXMuaGFuZGxlUmVzaXplU3RhcnR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgPGRpdiBvbk1vdXNlT3Zlcj17IWZseW91dElzT3BlbiA/IG9uTW91c2VPdmVyQnV0dG9uQnVmZmVyIDogbnVsbH0+XG4gICAgICAgICAgICAgIHtjb2xsYXBzZVRvZ2dsZVRvb2x0aXBDb250ZW50ID8gKFxuICAgICAgICAgICAgICAgIDxUb29sdGlwXG4gICAgICAgICAgICAgICAgICBjb250ZW50PXttYWtlVG9vbHRpcE5vZGUoXG4gICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlVG9nZ2xlVG9vbHRpcENvbnRlbnQoaXNDb2xsYXBzZWQpLFxuICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgIGRlbGF5PXs2MDB9XG4gICAgICAgICAgICAgICAgICBoaWRlVG9vbHRpcE9uQ2xpY2tcbiAgICAgICAgICAgICAgICAgIHBvc2l0aW9uPVwicmlnaHRcIlxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIHtidXR0b259XG4gICAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgIGJ1dHRvblxuICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9GcmFnbWVudD5cbiAgICAgICAgKX1cbiAgICAgIDwvT3V0ZXI+XG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgeyBSZXNpemVDb250cm9sIGFzIFJlc2l6ZUNvbnRyb2xCYXNlIH07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhBbmFseXRpY3NFdmVudHMoKShSZXNpemVDb250cm9sKTtcbiJdfQ== */")
  }, props));
};

export var GrabArea = function GrabArea(_ref) {
  var showHandle = _ref.showHandle,
      isBold = _ref.isBold,
      props = _objectWithoutProperties(_ref, ["showHandle", "isBold"]);

  return ___EmotionJSX("div", _extends({
    css:
    /*#__PURE__*/
    _css({
      cursor: 'ew-resize',
      height: '100%',
      left: -HANDLE_OFFSET,
      position: 'relative',
      width: OUTER_WIDTH
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }, props), ___EmotionJSX("div", {
    css:
    /*#__PURE__*/
    _css({
      backgroundColor: isBold ? colors.B200 : colors.B100,
      opacity: showHandle ? 1 : 0,
      height: '100%',
      left: HANDLE_OFFSET - HANDLE_WIDTH / 2,
      // the handle should "straddle" the dividing line
      position: 'absolute',
      transition: 'opacity 200ms',
      width: HANDLE_WIDTH
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }));
};
var largeHitArea = {
  left: -8,
  right: -12,
  bottom: -8,
  top: -8
};
var smallHitArea = {
  left: -4,
  right: -4,
  bottom: -4,
  top: -4
};

var Button = function Button(_ref2) {
  var children = _ref2.children,
      hasHighlight = _ref2.hasHighlight,
      innerRef = _ref2.innerRef,
      isVisible = _ref2.isVisible,
      hitAreaSize = _ref2.hitAreaSize,
      props = _objectWithoutProperties(_ref2, ["children", "hasHighlight", "innerRef", "isVisible", "hitAreaSize"]);

  return ___EmotionJSX("button", _extends({
    className: "ak-navigation-resize-button",
    type: "button",
    ref: innerRef,
    css:
    /*#__PURE__*/
    _css({
      background: 0,
      backgroundColor: 'white',
      border: 0,
      borderRadius: '50%',
      boxShadow: "0 0 0 1px ".concat(colors.N30A, ", 0 2px 4px 1px ").concat(colors.N30A),
      color: hasHighlight ? colors.B100 : colors.N200,
      cursor: 'pointer',
      height: 24,
      opacity: isVisible ? 1 : 0,
      outline: 0,
      padding: 0,
      position: 'absolute',
      top: 32,
      transition: "\n        background-color 100ms linear,\n        color 100ms linear,\n        opacity 300ms cubic-bezier(0.2, 0, 0, 1),\n        transform 300ms cubic-bezier(0.2, 0, 0, 1)\n      ",
      transform: "translate(-50%)",
      width: 24,
      ':hover': {
        backgroundColor: colors.B100,
        color: 'white'
      },
      ':active': {
        backgroundColor: colors.B200,
        color: 'white'
      },
      ':focus': {
        opacity: 1,
        backgroundColor: colors.B200,
        color: 'white'
      }
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }, props), ___EmotionJSX("div", {
    // increase hit-area
    css:
    /*#__PURE__*/
    _css(_objectSpread({
      position: 'absolute'
    }, hitAreaSize === 'small' ? smallHitArea : largeHitArea), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }), children);
}; // tinker with the DOM directly by setting style properties, updates the grab bar position by changing padding-left and width.


function updateResizeAreaPosition(elements, width) {
  elements.forEach(function (_ref3) {
    var property = _ref3.property,
        ref = _ref3.ref;
    var newValue = "".concat(width, "px");
    var oldValue = ref.style.getPropertyValue(property); // avoid thrashing

    if (oldValue === newValue) return; // direct attribute manipulation

    ref.style.setProperty(property, newValue);
  });
} // helper for tooltip content keyboard shortcut highlight


var _ref5 = process.env.NODE_ENV === "production" ? {
  name: "jeedki",
  styles: "align-items:baseline;display:flex;line-height:1.3;padding-bottom:1px;padding-top:1px;"
} : {
  name: "jeedki",
  styles: "align-items:baseline;display:flex;line-height:1.3;padding-bottom:1px;padding-top:1px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

function makeTooltipNode(_ref4) {
  var text = _ref4.text,
      char = _ref4.char;
  return ___EmotionJSX("div", {
    css: _ref5
  }, ___EmotionJSX("span", null, text), ___EmotionJSX("div", {
    css:
    /*#__PURE__*/
    _css({
      backgroundColor: colors.N400,
      borderRadius: 2,
      lineHeight: 1.2,
      marginLeft: 4,
      padding: '1px 8px'
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }, char));
}

/* NOTE: experimental props use an underscore */
var ResizeControl =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(ResizeControl, _PureComponent);

  function ResizeControl() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, ResizeControl);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ResizeControl)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "invalidDragAttempted", false);

    _defineProperty(_assertThisInitialized(_this), "lastWidth", void 0);

    _defineProperty(_assertThisInitialized(_this), "wrapper", void 0);

    _defineProperty(_assertThisInitialized(_this), "state", {
      delta: 0,
      didDragOpen: false,
      isDragging: false,
      initialWidth: 0,
      initialX: 0,
      mouseIsDown: false,
      mouseIsOverGrabArea: false,
      showGrabArea: true,
      width: _this.props.navigation.state.productNavWidth
    });

    _defineProperty(_assertThisInitialized(_this), "onResizerChevronClick", function () {
      var trigger = _this.props.flyoutIsOpen ? 'chevronHover' : 'chevron';

      _this.toggleCollapse(trigger);
    });

    _defineProperty(_assertThisInitialized(_this), "mouseEnterGrabArea", function () {
      _this.setState({
        mouseIsOverGrabArea: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "mouseLeaveGrabArea", function () {
      _this.setState({
        mouseIsOverGrabArea: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "toggleCollapse", function (trigger) {
      var _this$props = _this.props,
          navigation = _this$props.navigation,
          createAnalyticsEvent = _this$props.createAnalyticsEvent;
      var newCollapsedState = !navigation.state.isCollapsed;
      navigation.toggleCollapse();
      navigationExpandedCollapsed(createAnalyticsEvent, {
        trigger: trigger,
        isCollapsed: newCollapsedState
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleResizeStart", function (event) {
      var initialX = event.pageX;

      _this.setState({
        initialX: initialX,
        mouseIsDown: true
      }); // attach handlers (handleResizeStart is a bound to onMouseDown)


      window.addEventListener('mousemove', _this.handleResize);
      window.addEventListener('mouseup', _this.handleResizeEnd);
    });

    _defineProperty(_assertThisInitialized(_this), "initializeDrag", function (event) {
      var navigation = _this.props.navigation;
      var delta = event.pageX - _this.state.initialX;
      var isCollapsed = navigation.state.isCollapsed; // only initialize when drag intention is "expand"

      if (isCollapsed && delta <= 0) {
        _this.invalidDragAttempted = true;
        return;
      }

      var initialWidth = navigation.state.productNavWidth;
      var didDragOpen = false; // NOTE
      // if the product nav is collapsed and the consumer starts dragging it open
      // we must expand it and drag should start from 0.

      if (isCollapsed) {
        initialWidth = CONTENT_NAV_WIDTH_COLLAPSED;
        didDragOpen = true;
        navigation.manualResizeStart({
          productNavWidth: CONTENT_NAV_WIDTH_COLLAPSED,
          isCollapsed: false
        });
      } else {
        navigation.manualResizeStart(navigation.state);
      }

      _this.setState({
        didDragOpen: didDragOpen,
        initialWidth: initialWidth,
        isDragging: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleResize", raf(function (event) {
      var mutationRefs = _this.props.mutationRefs;
      var _this$state = _this.state,
          initialX = _this$state.initialX,
          initialWidth = _this$state.initialWidth,
          isDragging = _this$state.isDragging,
          mouseIsDown = _this$state.mouseIsDown; // on occasion a mouse move event occurs before the event listeners
      // have a chance to detach

      if (!mouseIsDown) return; // initialize dragging

      if (!isDragging) {
        _this.initializeDrag(event);

        return;
      } // allow the product nav to be 75% of the available page width


      var maxWidth = Math.round(window.innerWidth / 4 * 3);
      var minWidth = CONTENT_NAV_WIDTH_COLLAPSED;
      var adjustedMax = maxWidth - initialWidth - GLOBAL_NAV_WIDTH;
      var adjustedMin = minWidth - initialWidth;
      var delta = Math.max(Math.min(event.pageX - initialX, adjustedMax), adjustedMin);
      var width = initialWidth + delta; // apply updated styles to the applicable DOM nodes

      updateResizeAreaPosition(mutationRefs, width); // NOTE: hijack the maual resize and force collapse, cancels mouse events

      if (event.clientX < 0) {
        _this.setState({
          width: CONTENT_NAV_WIDTH_COLLAPSED
        });

        _this.handleResizeEnd();
      } else {
        // maintain internal width, applied to navigation state on resize end
        _this.setState({
          delta: delta,
          width: width
        });
      }
    }));

    _defineProperty(_assertThisInitialized(_this), "handleResizeEnd", function () {
      var _this$props2 = _this.props,
          navigation = _this$props2.navigation,
          createAnalyticsEvent = _this$props2.createAnalyticsEvent;
      var _this$state2 = _this.state,
          delta = _this$state2.delta,
          didDragOpen = _this$state2.didDragOpen,
          isDragging = _this$state2.isDragging,
          currentWidth = _this$state2.width;
      var expandThreshold = 24;
      var resizerClicked = !isDragging && !_this.invalidDragAttempted;
      var publishWidth = currentWidth;
      var shouldCollapse = false; // check if the intention was just a click, and toggle

      if (resizerClicked) {
        publishWidth = Math.max(CONTENT_NAV_WIDTH, currentWidth);

        _this.toggleCollapse('resizerClick');
      } // prevent the user from creating an unusable width


      if (publishWidth < CONTENT_NAV_WIDTH) {
        publishWidth = CONTENT_NAV_WIDTH;

        if (didDragOpen && delta > expandThreshold) {
          shouldCollapse = false;
        } else if (currentWidth < GLOBAL_NAV_COLLAPSE_THRESHOLD) {
          shouldCollapse = true;
        }
      } else {
        shouldCollapse = navigation.state.isCollapsed;
      }

      if (!resizerClicked && (didDragOpen && !shouldCollapse || !didDragOpen && shouldCollapse)) {
        navigationExpandedCollapsed(createAnalyticsEvent, {
          trigger: 'resizerDrag',
          isCollapsed: shouldCollapse
        });
      } // reset everything


      _this.invalidDragAttempted = false;

      _this.setState({
        didDragOpen: false,
        isDragging: false,
        mouseIsDown: false,
        width: publishWidth
      }); // publish the new width, once resizing completes


      navigation.manualResizeEnd({
        productNavWidth: publishWidth,
        isCollapsed: shouldCollapse
      });

      if (shouldResetGrabArea(currentWidth)) {
        updateResizeAreaPosition(_this.props.mutationRefs, CONTENT_NAV_WIDTH);
      } // cleanup


      window.removeEventListener('mousemove', _this.handleResize);
      window.removeEventListener('mouseup', _this.handleResizeEnd);
    });

    return _this;
  }

  _createClass(ResizeControl, [{
    key: "render",
    value: function render() {
      var _this$state3 = this.state,
          didDragOpen = _this$state3.didDragOpen,
          isDragging = _this$state3.isDragging,
          mouseIsDown = _this$state3.mouseIsDown,
          mouseIsOverGrabArea = _this$state3.mouseIsOverGrabArea,
          showGrabArea = _this$state3.showGrabArea;
      var _this$props3 = this.props,
          collapseToggleTooltipContent = _this$props3.collapseToggleTooltipContent,
          expandCollapseAffordanceRef = _this$props3.expandCollapseAffordanceRef,
          flyoutIsOpen = _this$props3.flyoutIsOpen,
          isResizeDisabled = _this$props3.isDisabled,
          isGrabAreaDisabled = _this$props3.isGrabAreaDisabled,
          onMouseOverButtonBuffer = _this$props3.onMouseOverButtonBuffer,
          navigation = _this$props3.navigation;
      var isCollapsed = navigation.state.isCollapsed; // the button shouldn't "flip" until the drag is complete

      var ButtonIcon = ChevronLeft;
      if (isCollapsed || didDragOpen && isDragging) ButtonIcon = MenuExpandIcon;
      if (isCollapsed && flyoutIsOpen) ButtonIcon = ChevronRight;

      var button = ___EmotionJSX(Button, {
        onClick: this.onResizerChevronClick,
        hitAreaSize: onMouseOverButtonBuffer ? 'large' : 'small' // maintain styles when user is dragging
        ,
        isVisible: isCollapsed || mouseIsDown,
        hasHighlight: mouseIsDown || mouseIsOverGrabArea,
        innerRef: expandCollapseAffordanceRef,
        "aria-expanded": !isCollapsed,
        "aria-label": "Toggle navigation"
      }, ___EmotionJSX(ButtonIcon, null));

      var shadowDirection = flyoutIsOpen ? 'to right' : 'to left';
      return ___EmotionJSX(Outer, null, isDragging && ___EmotionJSX(BodyDragCursor, null), ___EmotionJSX(Shadow, {
        direction: shadowDirection,
        isBold: mouseIsDown
      }), !isResizeDisabled && ___EmotionJSX(Fragment, null, !isGrabAreaDisabled && showGrabArea && ___EmotionJSX(GrabArea, {
        isBold: mouseIsDown,
        showHandle: mouseIsDown || mouseIsOverGrabArea,
        onMouseEnter: this.mouseEnterGrabArea,
        onMouseLeave: this.mouseLeaveGrabArea,
        onMouseDown: this.handleResizeStart
      }), ___EmotionJSX("div", {
        onMouseOver: !flyoutIsOpen ? onMouseOverButtonBuffer : null
      }, collapseToggleTooltipContent ? ___EmotionJSX(Tooltip, {
        content: makeTooltipNode(collapseToggleTooltipContent(isCollapsed)),
        delay: 600,
        hideTooltipOnClick: true,
        position: "right"
      }, button) : button)));
    }
  }], [{
    key: "getDerivedStateFromProps",
    value: function getDerivedStateFromProps(props, state) {
      var EXPERIMENTAL_FLYOUT_ON_HOVER = props.experimental_flyoutOnHover,
          flyoutIsOpen = props.flyoutIsOpen,
          navigation = props.navigation;
      var isCollapsed = navigation.state.isCollapsed; // resolve "hover locking" issue with resize grab area

      if (EXPERIMENTAL_FLYOUT_ON_HOVER) {
        var showGrabArea = !isCollapsed && !flyoutIsOpen;
        var mouseIsOverGrabArea = showGrabArea ? state.mouseIsOverGrabArea : false;
        return {
          mouseIsOverGrabArea: mouseIsOverGrabArea,
          showGrabArea: showGrabArea
        };
      }

      return null;
    }
  }]);

  return ResizeControl;
}(PureComponent);

_defineProperty(ResizeControl, "defaultProps", {
  isGrabAreaDisabled: false
});

export { ResizeControl as ResizeControlBase };
export default withAnalyticsEvents()(ResizeControl);