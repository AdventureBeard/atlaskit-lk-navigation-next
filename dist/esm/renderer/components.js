import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectSpread from "@babel/runtime/helpers/objectSpread";
import _extends from "@babel/runtime/helpers/extends";
import _css from "@emotion/css";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import { jsx as ___EmotionJSX } from "@emotion/core";
import React, { PureComponent } from 'react';
import Loadable from 'react-loadable';
import { gridSize as gridSizeFn } from '@atlaskit/theme/constants';
import { navigationItemClicked } from '../common/analytics';
import RenderBlocker from '../components/common/RenderBlocker';
import ContainerHeaderComponent from '../components/presentational/ContainerHeader';
import GroupComponent from '../components/presentational/Group';
import GroupHeadingComponent from '../components/presentational/GroupHeading';
import HeaderSectionComponent from '../components/presentational/HeaderSection';
import MenuSectionComponent from '../components/presentational/MenuSection';
import SectionComponent from '../components/presentational/Section';
import SectionHeadingComponent from '../components/presentational/SectionHeading';
import Separator from '../components/presentational/Separator';
import Wordmark from '../components/presentational/Wordmark';
import BackItem from '../components/connected/BackItem';
import ConnectedItem from '../components/connected/ConnectedItem';
import GoToItem from '../components/connected/GoToItem';
var gridSize = gridSizeFn();

var loadSwitcher = function loadSwitcher() {
  return import(
  /* webpackChunkName: "@atlaskit/navigation-next/async-chunk/switcher" */
  '../components/presentational/Switcher');
};

var LazySwitcher = Loadable({
  loader: loadSwitcher,
  loading: function loading() {
    return null;
  }
});

var loadSortableContextComponent = function loadSortableContextComponent() {
  return import(
  /* webpackChunkName: "@atlaskit/navigation-next/async-chunk/sortable-context-component" */
  '../components/connected/SortableContext');
};

var LazySortableContextComponent = Loadable({
  loader: loadSortableContextComponent,
  loading: function loading() {
    return null;
  }
});

var loadSortableGroupComponent = function loadSortableGroupComponent() {
  return import(
  /* webpackChunkName: "@atlaskit/navigation-next/async-chunk/sortable-group-component" */
  '../components/connected/SortableGroup');
};

export var LazySortableGroupComponent = Loadable({
  loader: loadSortableGroupComponent,
  loading: function loading() {
    return null;
  }
});

var loadSortableItem = function loadSortableItem() {
  return import(
  /* webpackChunkName: "@atlaskit/navigation-next/async-chunk/sortable-item" */
  '../components/connected/SortableItem');
};

export var LazySortableItem = Loadable({
  loader: loadSortableItem,
  loading: function loading() {
    return null;
  }
});
/**
 * ITEMS
 */
// Title

var GroupHeading = function GroupHeading(_ref) {
  var text = _ref.text,
      props = _objectWithoutProperties(_ref, ["text"]);

  return ___EmotionJSX(GroupHeadingComponent, props, text);
}; // SectionHeading


var SectionHeading = function SectionHeading(_ref2) {
  var text = _ref2.text,
      props = _objectWithoutProperties(_ref2, ["text"]);

  return ___EmotionJSX(SectionHeadingComponent, props, text);
}; // ContainerHeader


var ContainerHeader = function ContainerHeader(props) {
  return (// -2px here to account for the extra space at the top of a MenuSection for
    // the scroll hint.
    ___EmotionJSX("div", {
      css:
      /*#__PURE__*/
      _css({
        paddingBottom: gridSize * 2.5 - 2
      }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
    }, ___EmotionJSX(ContainerHeaderComponent, props))
  );
};

var Debug = function Debug(props) {
  return ___EmotionJSX("pre", {
    css:
    /*#__PURE__*/
    _css({
      backgroundColor: 'rgba(0, 0, 0, 0.1)',
      fontSize: '10px',
      overflowX: 'auto',
      padding: "".concat(gridSize / 2, "px")
    }, process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")
  }, JSON.stringify(props, null, 2));
};
/**
 * GROUPS
 */
// Group


var Group = function Group(_ref3) {
  var customComponents = _ref3.customComponents,
      hasSeparator = _ref3.hasSeparator,
      heading = _ref3.heading,
      items = _ref3.items,
      id = _ref3.id;
  return items.length ? ___EmotionJSX(GroupComponent, {
    heading: heading,
    hasSeparator: hasSeparator,
    id: id
  }, ___EmotionJSX(TypedItemsRenderer, {
    items: items,
    customComponents: customComponents
  })) : null;
};

var SortableGroup = function SortableGroup(_ref4) {
  var customComponents = _ref4.customComponents,
      hasSeparator = _ref4.hasSeparator,
      heading = _ref4.heading,
      items = _ref4.items,
      id = _ref4.id;
  return items && items.length ? ___EmotionJSX(LazySortableGroupComponent, {
    heading: heading,
    hasSeparator: hasSeparator,
    id: id
  }, ___EmotionJSX(RenderBlocker, {
    items: items,
    customComponents: customComponents
  }, ___EmotionJSX(TypedItemsRenderer, {
    items: items,
    customComponents: customComponents
  }))) : null;
}; // Section


var Section = function Section(_ref5) {
  var _ref5$alwaysShowScrol = _ref5.alwaysShowScrollHint,
      alwaysShowScrollHint = _ref5$alwaysShowScrol === void 0 ? false : _ref5$alwaysShowScrol,
      customComponents = _ref5.customComponents,
      id = _ref5.id,
      items = _ref5.items,
      nestedGroupKey = _ref5.nestedGroupKey,
      parentId = _ref5.parentId,
      shouldGrow = _ref5.shouldGrow;
  return items.length ? ___EmotionJSX(SectionComponent, {
    alwaysShowScrollHint: alwaysShowScrollHint,
    id: id,
    key: nestedGroupKey,
    parentId: parentId,
    shouldGrow: shouldGrow
  }, function (_ref6) {
    var className = _ref6.className;
    return ___EmotionJSX("div", {
      className: className
    }, ___EmotionJSX(TypedItemsRenderer, {
      items: items,
      customComponents: customComponents
    }));
  }) : null;
};

var HeaderSection = function HeaderSection(_ref7) {
  var customComponents = _ref7.customComponents,
      id = _ref7.id,
      items = _ref7.items,
      nestedGroupKey = _ref7.nestedGroupKey;
  return items.length ? ___EmotionJSX(HeaderSectionComponent, {
    id: id,
    key: nestedGroupKey
  }, function (_ref8) {
    var className = _ref8.className;
    return ___EmotionJSX("div", {
      className: className
    }, ___EmotionJSX(TypedItemsRenderer, {
      items: items,
      customComponents: customComponents
    }));
  }) : null;
};

var MenuSection = function MenuSection(_ref9) {
  var alwaysShowScrollHint = _ref9.alwaysShowScrollHint,
      customComponents = _ref9.customComponents,
      id = _ref9.id,
      items = _ref9.items,
      nestedGroupKey = _ref9.nestedGroupKey,
      parentId = _ref9.parentId;
  return ___EmotionJSX(MenuSectionComponent, {
    alwaysShowScrollHint: alwaysShowScrollHint,
    id: id,
    key: nestedGroupKey,
    parentId: parentId
  }, function (_ref10) {
    var className = _ref10.className;
    return ___EmotionJSX("div", {
      className: className
    }, ___EmotionJSX(TypedItemsRenderer, {
      items: items,
      customComponents: customComponents
    }));
  });
};

var SortableContext = function SortableContext(_ref11) {
  var customComponents = _ref11.customComponents,
      id = _ref11.id,
      items = _ref11.items,
      onDragStart = _ref11.onDragStart,
      onDragUpdate = _ref11.onDragUpdate,
      onDragEnd = _ref11.onDragEnd;
  return items && items.length ? ___EmotionJSX(LazySortableContextComponent, {
    id: id,
    onDragStart: onDragStart,
    onDragUpdate: onDragUpdate,
    onDragEnd: onDragEnd
  }, ___EmotionJSX(TypedItemsRenderer, {
    items: items,
    customComponents: customComponents
  })) : null;
};

var itemComponents = {
  BackItem: BackItem,
  ContainerHeader: ContainerHeader,
  Debug: Debug,
  GoToItem: GoToItem,
  GroupHeading: GroupHeading,
  Item: ConnectedItem,
  SortableItem: LazySortableItem,
  SectionHeading: SectionHeading,
  Separator: Separator,
  Switcher: LazySwitcher,
  Wordmark: Wordmark
};

var renderItemComponent = function renderItemComponent(props, key, index) {
  var element = null; // We need an explicit conditional against each type for flow type refinement to work

  if (props.type === 'BackItem') {
    var type = props.type,
        compProps = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(BackItem, _extends({
      key: key
    }, compProps, {
      index: index
    }));
  } else if (props.type === 'ContainerHeader') {
    var _type = props.type,
        _compProps = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(ContainerHeader, _extends({
      key: key
    }, _compProps));
  } else if (props.type === 'Debug') {
    var _type2 = props.type,
        _compProps2 = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(Debug, _extends({
      key: key
    }, _compProps2));
  } else if (props.type === 'GoToItem') {
    var _type3 = props.type,
        _compProps3 = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(GoToItem, _extends({
      key: key
    }, _compProps3, {
      index: index
    }));
  } else if (props.type === 'Item') {
    var _type4 = props.type,
        _compProps4 = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(ConnectedItem, _extends({
      key: key
    }, _compProps4, {
      index: index
    }));
  } else if (props.type === 'SortableItem') {
    var _type5 = props.type,
        _compProps5 = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(LazySortableItem, _extends({
      key: key
    }, _compProps5, {
      index: index
    }));
  } else if (props.type === 'SectionHeading') {
    var _type6 = props.type,
        id = props.id,
        _compProps6 = _objectWithoutProperties(props, ["type", "id"]);

    element = ___EmotionJSX(SectionHeading, _extends({
      key: key
    }, _compProps6));
  } else if (props.type === 'Separator') {
    var _type7 = props.type,
        _id = props.id,
        _compProps7 = _objectWithoutProperties(props, ["type", "id"]);

    element = ___EmotionJSX(Separator, _extends({
      key: key
    }, _compProps7));
  } else if (props.type === 'Switcher') {
    var _type8 = props.type,
        _compProps8 = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(LazySwitcher, _extends({
      key: key
    }, _compProps8));
  } else if (props.type === 'Wordmark') {
    var _type9 = props.type,
        _id2 = props.id,
        _compProps9 = _objectWithoutProperties(props, ["type", "id"]);

    element = ___EmotionJSX(Wordmark, _extends({
      key: key
    }, _compProps9));
  }

  return element;
};

var groupComponents = {
  Group: Group,
  HeaderSection: HeaderSection,
  MenuSection: MenuSection,
  Section: Section,
  SortableContext: SortableContext,
  SortableGroup: SortableGroup
};

var renderGroupComponent = function renderGroupComponent(props, key, customComponents) {
  var element = null; // We need an explicit conditional against each type for flow type refinement to work

  if (props.type === 'Group') {
    var type = props.type,
        compProps = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(Group, _extends({
      key: key
    }, compProps, {
      customComponents: customComponents
    }));
  } else if (props.type === 'HeaderSection') {
    var _type10 = props.type,
        _compProps10 = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(HeaderSection, _extends({
      key: key
    }, _compProps10, {
      customComponents: customComponents
    }));
  } else if (props.type === 'MenuSection') {
    var _type11 = props.type,
        _compProps11 = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(MenuSection, _extends({
      key: key
    }, _compProps11, {
      customComponents: customComponents
    }));
  } else if (props.type === 'Section') {
    var _type12 = props.type,
        _compProps12 = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(Section, _extends({
      key: key
    }, _compProps12, {
      customComponents: customComponents
    }));
  } else if (props.type === 'SortableContext') {
    var _type13 = props.type,
        _compProps13 = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(SortableContext, _extends({
      key: key
    }, _compProps13, {
      customComponents: customComponents
    }));
  } else if (props.type === 'SortableGroup') {
    var _type14 = props.type,
        _compProps14 = _objectWithoutProperties(props, ["type"]);

    element = ___EmotionJSX(SortableGroup, _extends({
      key: key
    }, _compProps14, {
      customComponents: customComponents
    }));
  }

  return element;
}; // Exported for testing purposes only.


export var components = _objectSpread({}, itemComponents, groupComponents);
/**
 * RENDERER
 */

var TypedItemsRenderer =
/*#__PURE__*/
function (_PureComponent) {
  _inherits(TypedItemsRenderer, _PureComponent);

  function TypedItemsRenderer() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, TypedItemsRenderer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(TypedItemsRenderer)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "customComponentsWithAnalytics", new Map());

    _defineProperty(_assertThisInitialized(_this), "getCustomComponent", function (component) {
      // cache custom components wrapped with analytics
      // to prevent re-mounting of component on re-render
      var _this$props$customCom = _this.props.customComponents,
          customComponents = _this$props$customCom === void 0 ? {} : _this$props$customCom;

      var cachedComponent = _this.customComponentsWithAnalytics.get(component);

      if (!cachedComponent) {
        cachedComponent = typeof component === 'string' ? navigationItemClicked(customComponents[component], component) : navigationItemClicked(component, component.displayName || 'inlineCustomComponent');

        _this.customComponentsWithAnalytics.set(component, cachedComponent);
      }

      return cachedComponent;
    });

    return _this;
  }

  _createClass(TypedItemsRenderer, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          _this$props$customCom2 = _this$props.customComponents,
          customComponents = _this$props$customCom2 === void 0 ? {} : _this$props$customCom2,
          items = _this$props.items; // We cannot destructure props.type otherwise flow type refinment does not work
      // https://github.com/facebook/flow/issues/5259

      return items.map(function (props, index) {
        var key = typeof props.nestedGroupKey === 'string' ? props.nestedGroupKey : props.id;

        if (props.type === 'InlineComponent') {
          var type = props.type,
              component = props.component,
              componentProps = _objectWithoutProperties(props, ["type", "component"]); // If they've provided a component as the type


          var CustomComponent = _this2.getCustomComponent(props.component);

          return ___EmotionJSX(CustomComponent, _extends({
            key: key
          }, componentProps, {
            index: index // We pass our in-built components through to custom components so
            // they can wrap/render them if they want to.
            ,
            components: components,
            customComponents: customComponents
          }));
        }

        if (Object.keys(groupComponents).includes(props.type)) {
          // If they've provided a type which matches one of our in-built group
          // components
          return renderGroupComponent(props, key, customComponents); // If they've provided a type which matches one of our in-built item
          // components.
        }

        if (Object.keys(itemComponents).includes(props.type)) {
          return renderItemComponent(props, key, index);
        }

        if (Object.keys(customComponents).includes(props.type)) {
          var _type15 = props.type,
              _componentProps = _objectWithoutProperties(props, ["type"]); // If they've provided a type which matches one of their defined custom
          // components.


          var _CustomComponent = _this2.getCustomComponent(_type15);

          return ___EmotionJSX(_CustomComponent, _extends({
            key: key
          }, _componentProps, {
            index: index // We pass our in-built components through to custom components so
            // they can wrap/render them if they want to.
            ,
            components: components,
            customComponents: customComponents
          }));
        }

        return ___EmotionJSX(Debug, _extends({
          key: key,
          type: props.type
        }, props));
      });
    }
  }]);

  return TypedItemsRenderer;
}(PureComponent);

export default TypedItemsRenderer;